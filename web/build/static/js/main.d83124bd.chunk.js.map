{"version":3,"sources":["firestore.js","components/RealTime Todo/realtimeTodo.jsx","App.js","reportWebVitals.js","index.js"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","todoCol","collection","validationSchema","yup","title","required","id","a","deleteDoc","doc","RealtimeTodo","useState","todo","settodo","useEffect","q","query","orderBy","unsubscribe","onSnapshot","snapshot","temp","forEach","data","unshift","description","formik","useFormik","initialValues","onSubmit","values","addDoc","timestamp","serverTimestamp","docRef","console","log","error","AppBar","position","Toolbar","IconButton","size","edge","color","sx","mr","Typography","variant","component","flexGrow","Box","m","s","handleSubmit","Stack","spacing","TextField","fullWidth","label","name","value","onChange","handleChange","touched","Boolean","errors","helperText","Button","type","map","eachTodo","i","Grid","container","item","xs","sm","md","lg","Card","minWidth","CardContent","CardActions","fontSize","onClick","del","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d83124bd.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\"\r\nimport { getFirestore } from \"firebase/firestore\"\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyD3DzEJOLG6qrhjS3OWx37_RwcdQ4pR2MA\",\r\n  authDomain: \"react-firestore-f3d87.firebaseapp.com\",\r\n  projectId: \"react-firestore-f3d87\",\r\n  storageBucket: \"react-firestore-f3d87.appspot.com\",\r\n  messagingSenderId: \"656630436858\",\r\n  appId: \"1:656630436858:web:ecf78eb13195414f4f4a43\"\r\n};\r\n\r\n// Initialize Firebase\r\ninitializeApp(firebaseConfig);\r\n\r\n\r\nexport const db = getFirestore();","import './realtimeTodo.css';\r\nimport * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Grid from '@mui/material/Grid';\r\nimport { useFormik } from \"formik\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\nimport * as yup from 'yup';\r\nimport { useEffect, useState } from \"react\"\r\nimport { collection, addDoc, onSnapshot, query, serverTimestamp, orderBy, deleteDoc, doc } from \"firebase/firestore\"\r\nimport { db } from '../../firestore'\r\n\r\n\r\nconst todoCol = collection(db, \"todo\")\r\n\r\nconst validationSchema = yup.object({\r\n    title: yup\r\n        .string('Enter your Title')\r\n        .required('Empty fields can not be Add'),\r\n});\r\n\r\nasync function del(id) {\r\n    await deleteDoc(doc(todoCol, id));\r\n}\r\n\r\nfunction RealtimeTodo() {\r\n    const [todo, settodo] = useState([])\r\n\r\n    useEffect(() => {\r\n\r\n        const q = query(todoCol, orderBy(\"timestamp\"));\r\n        const unsubscribe = onSnapshot(q, (snapshot) => {\r\n\r\n            let temp = [];\r\n            snapshot.forEach((doc) => {\r\n\r\n                let id = doc.id;\r\n                let data = doc.data();\r\n\r\n                temp.unshift({\r\n                    id: id,\r\n                    title: data.title,\r\n                    description: data.description\r\n                });\r\n            })\r\n            settodo(temp)\r\n        });\r\n\r\n        return () => {\r\n            unsubscribe()\r\n            // console.log(\"unsub\")\r\n        };\r\n    }, []);\r\n\r\n    const formik = useFormik({\r\n\r\n        initialValues: {\r\n            title: \"\",\r\n            description: \"\"\r\n        },\r\n        onSubmit: async (values) => {\r\n            try {\r\n                const docRef = await addDoc(todoCol, {\r\n                    title: values.title,\r\n                    description: values.description,\r\n                    timestamp: serverTimestamp()\r\n                });\r\n                console.log(\"Document written with ID: \", docRef.id);\r\n            } catch (e) {\r\n                console.error(\"Error adding document: \", e);\r\n            }\r\n        },\r\n        validationSchema: validationSchema,\r\n\r\n    });\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        FIRESTORE TODO\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Box sx={{ flexGrow: 1, m: 2, s: 2 }}>\r\n                <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                    Todo Application\r\n                </Typography>\r\n\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Stack spacing={2}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"standard-password-input\"\r\n                            label=\"Title\"\r\n                            variant=\"standard\"\r\n                            name=\"title\"\r\n                            value={formik.values.title}\r\n                            onChange={formik.handleChange}\r\n\r\n                            error={formik.touched.title && Boolean(formik.errors.title)}\r\n                            helperText={formik.touched.title && formik.errors.title}\r\n                        />\r\n\r\n                        <Button fullWidth variant=\"contained\" color=\"primary\" type=\"submit\">Add Todo</Button>\r\n                    </Stack>\r\n\r\n                </form>\r\n            </Box>\r\n\r\n                <div>\r\n                    {todo.map((eachTodo, i) => {\r\n\r\n                        return (<div key={i}>\r\n                            <br />\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={1} sm={2} md={2} lg={2}>\r\n\r\n                                </Grid>\r\n                                <Grid item xs={2} sm={8} md={8} lg={8}>\r\n                                    <Card sx={{ minWidth: 275 }}>\r\n                                        <CardContent>\r\n                                            <Typography variant=\"h5\" component=\"div\">\r\n                                                {eachTodo.title}\r\n                                            </Typography>\r\n                                            <Typography variant=\"body2\">\r\n                                                {eachTodo.description}\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                        <CardActions>\r\n                                            <IconButton aria-label=\"delete\" size=\"large\">\r\n                                                <DeleteIcon fontSize=\"inherit\" onClick={() => { del(eachTodo.id) }} />\r\n                                            </IconButton>\r\n                                        </CardActions>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item xs={2} sm={2} md={2} lg={2}>\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <br />\r\n                        </div>)\r\n                    })}\r\n\r\n                </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RealtimeTodo;","import './App.css';\nimport RealtimeTodo from \"./components/RealTime Todo/realtimeTodo\";\n\nfunction App() {\n  return (\n\n    <RealtimeTodo />\n\n  )\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}